no-response-timeout: 15
box: combient/java-mvn
build:
  steps:
    - script:
        name: Maven build - MBean Sample application
        code: mvn clean package

build-domain-in-home-image:
  box:
      id: alpine
      cmd: /bin/sh
      docker: true
      
  steps:
    - script:
        name: Install curl and docker
        code: apk --no-cache add curl docker
    - script:
        name: Run a docker container
        code: docker run --rm -d -p 8888:80 --name static-site --network=$DOCKER_NETWORK_NAME dockersamples/static-site
    - script:
        name: Build docker image
        code: |
              docker login $REGION.ocir.io -u $TENANCY/$OCI_REGISTRY_USERNAME -p $OCI_REGISTRY_PASSWORD
              if docker pull $REGION.ocir.io/$TENANCY/$WERCKER_APPLICATION_NAME:latest; then
                docker build --file Dockerfile.update \
                    --build-arg SOURCEIMAGE=$REGION.ocir.io/$TENANCY/$WERCKER_APPLICATION_NAME:latest \
                    --force-rm=true \
                    -t $REGION.ocir.io/$TENANCY/$WERCKER_APPLICATION_NAME:$WERCKER_GIT_COMMIT \
                    -t $REGION.ocir.io/$TENANCY/$WERCKER_APPLICATION_NAME:latest .
              else
                docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                docker build --file Dockerfile.create \
                    --force-rm=true \
                    -t $REGION.ocir.io/$TENANCY/$WERCKER_APPLICATION_NAME:$WERCKER_GIT_COMMIT \
                    -t $REGION.ocir.io/$TENANCY/$WERCKER_APPLICATION_NAME:latest .
              fi
    - script:
        name: Push the image to a repository
        code: |
              docker login $REGION.ocir.io -u $TENANCY/$OCI_REGISTRY_USERNAME -p $OCI_REGISTRY_PASSWORD
              docker push $REGION.ocir.io/$TENANCY/$WERCKER_APPLICATION_NAME:$WERCKER_GIT_COMMIT
              docker push $REGION.ocir.io/$TENANCY/$WERCKER_APPLICATION_NAME:latest

deploy-to-cluster:
  box:
      id: alpine
      cmd: /bin/sh

  steps:

  - bash-template
 
  - script:
      name: "Visualise Kubernetes config"
      working-dir: /pipeline/source
      code: cat domainKube.yaml

  - kubectl:
      name: deploy to kubernetes
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_AUTH_TOKEN
      insecure-skip-tls-verify: true
      working-dir: /pipeline/source
      command: apply -f domainKube.yaml
